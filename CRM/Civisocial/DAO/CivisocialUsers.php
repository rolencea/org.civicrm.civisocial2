<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.6                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2015                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2015
 *
 * Generated from xml/schema/CRM/Civisocial/CivisocialUsers.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
class CRM_Civisocial_DAO_CivisocialUsers extends CRM_Core_DAO
{
  /**
   * static instance to hold the table name
   *
   * @var string
   */
  static $_tableName = 'civisocial_users';
  /**
   * static instance to hold the field values
   *
   * @var array
   */
  static $_fields = null;
  /**
   * static instance to hold the keys used in $_fields for each field.
   *
   * @var array
   */
  static $_fieldKeys = null;
  /**
   * static instance to hold the FK relationships
   *
   * @var string
   */
  static $_links = null;
  /**
   * static instance to hold the values that can
   * be imported
   *
   * @var array
   */
  static $_import = null;
  /**
   * static instance to hold the values that can
   * be exported
   *
   * @var array
   */
  static $_export = null;
  /**
   * static value to see if we should log any modifications to
   * this table in the civicrm_log table
   *
   * @var boolean
   */
  static $_log = false;
  /**
   * Twitter user id
   *
   * @var bigint
   */
  public $user_id;
  /**
   * twitter user last updated  time
   *
   * @var timestamp
   */
  public $last_updated;
  /**
   * Twitter user secreen name
   *
   * @var string
   */
  public $screen_name;
  /**
   * profile image url
   *
   * @var string
   */
  public $profile_image_url;
  /**
   * twitter user location
   *
   * @var string
   */
  public $location;
  /**
   * twitter user url
   *
   * @var string
   */
  public $url;
  /**
   * twitter user url
   *
   * @var string
   */
  public $description;
  /**
   * twitter user creation date
   *
   * @var datetime
   */
  public $created_at;
  /**
   * twitter user followers count
   *
   * @var int
   */
  public $followers_count;
  /**
   * twitter user friends count
   *
   * @var int
   */
  public $friends_count;
  /**
   * twitter user friends count
   *
   * @var int
   */
  public $statuses_count;
  /**
   * twitter user listed count
   *
   * @var int
   */
  public $listed_count;
  /**
   * twitter user protected status
   *
   * @var tinyint
   */
  public $protected;
  /**
   * twitter user suspended status
   *
   * @var tinyint
   */
  public $suspended;
  /**
   * twitter user Language
   *
   * @var string
   */
  public $lang;
  /**
   * twitter user last tweet date
   *
   * @var datetime
   */
  public $last_tweet_date;
  /**
   * class constructor
   *
   * @return civisocial_users
   */
  function __construct()
  {
    $this->__table = 'civisocial_users';
    parent::__construct();
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields()
  {
    if (!(self::$_fields)) {
      self::$_fields = array(
        'user_id' => array(
          'name' => 'user_id',
          'type' => CRM_Utils_Type::T_BIGINT,
          'title' => ts('Twitter user id') ,
          'description' => 'Twitter user id',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.user_id',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'last_updated' => array(
          'name' => 'last_updated',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('last updated ') ,
          'description' => 'twitter user last updated  time',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.last_updated',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'CURRENT_TIMESTAMP',
        ) ,
        'screen_name' => array(
          'name' => 'screen_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('screen name') ,
          'description' => 'Twitter user secreen name',
          'required' => true,
          'maxlength' => 20,
          'size' => CRM_Utils_Type::MEDIUM,
          'import' => true,
          'where' => 'civisocial_users.screen_name',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'profile_image_url' => array(
          'name' => 'profile_image_url',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('profile image url') ,
          'description' => 'profile image url',
          'required' => true,
          'maxlength' => 200,
          'size' => CRM_Utils_Type::HUGE,
          'import' => true,
          'where' => 'civisocial_users.profile_image_url',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'location' => array(
          'name' => 'location',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('location') ,
          'description' => 'twitter user location',
          'required' => true,
          'maxlength' => 100,
          'size' => CRM_Utils_Type::HUGE,
          'import' => true,
          'where' => 'civisocial_users.location',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'url' => array(
          'name' => 'url',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('url') ,
          'description' => 'twitter user url',
          'required' => true,
          'maxlength' => 100,
          'size' => CRM_Utils_Type::HUGE,
          'import' => true,
          'where' => 'civisocial_users.url',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'description' => array(
          'name' => 'description',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('url') ,
          'description' => 'twitter user url',
          'required' => true,
          'maxlength' => 160,
          'size' => CRM_Utils_Type::HUGE,
          'import' => true,
          'where' => 'civisocial_users.description',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'created_at' => array(
          'name' => 'created_at',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('user creation date') ,
          'description' => 'twitter user creation date',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.created_at',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'followers_count' => array(
          'name' => 'followers_count',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('followers count') ,
          'description' => 'twitter user followers count',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.followers_count',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'friends_count' => array(
          'name' => 'friends_count',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('friends count') ,
          'description' => 'twitter user friends count',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.friends_count',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'statuses_count' => array(
          'name' => 'statuses_count',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('friends count') ,
          'description' => 'twitter user friends count',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.statuses_count',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'listed_count' => array(
          'name' => 'listed_count',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('listed count') ,
          'description' => 'twitter user listed count',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.listed_count',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'protected' => array(
          'name' => 'protected',
          'type' => CRM_Utils_Type::T_TINYINT,
          'title' => ts('protected') ,
          'description' => 'twitter user protected status',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.protected',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'suspended' => array(
          'name' => 'suspended',
          'type' => CRM_Utils_Type::T_TINYINT,
          'title' => ts('suspended') ,
          'description' => 'twitter user suspended status',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.suspended',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'lang' => array(
          'name' => 'lang',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Language') ,
          'description' => 'twitter user Language',
          'required' => true,
          'maxlength' => 1,
          'size' => CRM_Utils_Type::TWO,
          'import' => true,
          'where' => 'civisocial_users.lang',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
        'last_tweet_date' => array(
          'name' => 'last_tweet_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Last tweet date') ,
          'description' => 'twitter user last tweet date',
          'required' => true,
          'import' => true,
          'where' => 'civisocial_users.last_tweet_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'default' => 'NULL',
        ) ,
      );
    }
    return self::$_fields;
  }
  /**
   * Returns an array containing, for each field, the arary key used for that
   * field in self::$_fields.
   *
   * @return array
   */
  static function &fieldKeys()
  {
    if (!(self::$_fieldKeys)) {
      self::$_fieldKeys = array(
        'user_id' => 'user_id',
        'last_updated' => 'last_updated',
        'screen_name' => 'screen_name',
        'profile_image_url' => 'profile_image_url',
        'location' => 'location',
        'url' => 'url',
        'description' => 'description',
        'created_at' => 'created_at',
        'followers_count' => 'followers_count',
        'friends_count' => 'friends_count',
        'statuses_count' => 'statuses_count',
        'listed_count' => 'listed_count',
        'protected' => 'protected',
        'suspended' => 'suspended',
        'lang' => 'lang',
        'last_tweet_date' => 'last_tweet_date',
      );
    }
    return self::$_fieldKeys;
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName()
  {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog()
  {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false)
  {
    if (!(self::$_import)) {
      self::$_import = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('import', $field)) {
          if ($prefix) {
            self::$_import['al_users'] = & $fields[$name];
          } else {
            self::$_import[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_import;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false)
  {
    if (!(self::$_export)) {
      self::$_export = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('export', $field)) {
          if ($prefix) {
            self::$_export['al_users'] = & $fields[$name];
          } else {
            self::$_export[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_export;
  }
}
